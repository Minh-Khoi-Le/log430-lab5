# Docker Compose for Microservices Architecture 
# This docker-compose file defines all the microservices for the LOG430 project

services:
  # Shared Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: log430_store
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Shared Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: services/product-service/Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/log430_store
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-secret-key-change-in-production
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # User Service
  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/log430_store
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-secret-key-change-in-production
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Store Service
  store-service:
    build:
      context: .
      dockerfile: services/store-service/Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/log430_store
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-secret-key-change-in-production
    ports:
      - "3003:3003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3003/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Stock Service
  stock-service:
    build:
      context: .
      dockerfile: services/stock-service/Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3004
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/log430_store
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-secret-key-change-in-production
    ports:
      - "3004:3004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3004/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Sales Service
  sales-service:
    build:
      context: .
      dockerfile: services/sales-service/Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3005
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/log430_store
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-secret-key-change-in-production
      - API_KEYS=internal-service-key,frontend-app-key-12345
    ports:
      - "3005:3005"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3005/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Refund Service
  refund-service:
    build:
      context: .
      dockerfile: services/refund-service/Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3006
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/log430_store
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-secret-key-change-in-production
      - API_KEYS=internal-service-key,frontend-app-key-12345
      - SALES_SERVICE_URL=http://sales-service:3005
    ports:
      - "3006:3006"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3006/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database migration service
  db-migrate:
    build:
      context: .
      dockerfile: services/product-service/Dockerfile
    command: npx prisma migrate deploy --schema=/app/prisma/schema.prisma
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/log430_store
    depends_on:
      postgres:
        condition: service_healthy

  # Database seeding service
  db-seed:
    build:
      context: .
      dockerfile: services/product-service/Dockerfile
    command: sh -c "cd /app && node prisma/seed.js"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/log430_store
      - NODE_ENV=development
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - seed
    networks:
      - default

  # Kong API Gateway
  kong-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"    # Gateway proxy port
      - "8001:8001"    # Admin API port
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PROXY_LISTEN=0.0.0.0:8000
      - KONG_LOG_LEVEL=info
    volumes:
      - ./api-gateway/kong.yml:/usr/local/kong/declarative/kong.yml:ro
    depends_on:
      - user-service
      - product-service
      - store-service
      - stock-service
      - sales-service
      - refund-service
    restart: unless-stopped
    profiles:
      - kong

volumes:
  postgres_data:
  redis_data:


networks:
  default:
    driver: bridge
