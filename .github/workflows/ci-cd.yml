name: CI/CD - Build & Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: magasin_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    # ------- Build Backend Services -------
    - name: Set up Node.js (backend)
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install all dependencies (including workspaces)
      run: cd src && npm install

    - name: Generate Prisma client & migrate
      run: |
        cd src
        npx prisma generate
        npx prisma migrate deploy
      env:
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/magasin_db"

    - name: Build backend services
      run: |
        cd src/services/catalog-service && npm run build
        cd ../user-service && npm run build
        cd ../transaction-service && npm run build

    - name: Run backend tests
      run: |
        cd src/services/catalog-service && npm test
        cd ../user-service && npm test
        cd ../transaction-service && npm test

    # ------- Build Frontend -------
    - name: Set up Node.js (frontend)
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install frontend dependencies
      run: cd src/web-client && npm install

    # - name: Run frontend linting
    #   run: cd src/web-client && npm run lint

    - name: Build frontend (Vite)
      run: cd src/web-client && npm run build

    # ------- Docker build & Test -------
    - name: Build Docker images
      run: cd src && docker compose build

    - name: Test Docker images exist
      run: |
        # List all Docker images for debugging
        echo "Available Docker images:"
        docker images
        # The build command above would have failed if there were issues
        echo "Docker build test completed successfully"

  # ------- K6 Performance Tests (optional job) -------
  performance-tests:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Start services with Docker Compose
      run: |
        cd src
        docker compose up -d
        sleep 60  # Wait longer for services to be ready

    - name: Check service status
      run: |
        cd src
        echo "Checking Docker containers status:"
        docker compose ps
        echo "Checking Kong logs:"
        docker compose logs kong | tail -20
        echo "Checking catalog-service logs:"
        docker compose logs catalog-service | tail -20

    - name: Install K6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Install K6 test dependencies (if any)
      run: |
        if [ -f "k6/package.json" ]; then
          cd k6 && npm install
        fi

    - name: Wait for API to be ready
      run: |
        # Try Kong admin API first (more reliable)
        echo "Checking Kong admin API..."
        timeout 60 bash -c 'until curl -f http://localhost:8001/; do sleep 5; done' || echo "Kong admin API timeout"
        
        # Then try the main API endpoint
        echo "Checking main API endpoint..."
        timeout 60 bash -c 'until curl -s http://localhost:8000/api/stores; do sleep 5; done' || echo "API endpoint timeout"
        
        # Show final status
        curl -s http://localhost:8000/api/stores || echo "Final API check failed"

    - name: Run K6 performance tests
      run: |
        # Check if API is responsive before running tests
        if curl -s -f http://localhost:8000/api/stores > /dev/null; then
          echo "API is responsive, running K6 tests..."
          cd k6
          k6 run --env BASE_URL=http://localhost:8000 --env API_KEY=frontend-app-key-12345 tests/product-test.js
          k6 run --env BASE_URL=http://localhost:8000 --env API_KEY=frontend-app-key-12345 tests/comprehensive-test.js
        else
          echo "API is not responsive, skipping K6 tests"
          exit 1
        fi

    - name: Cleanup
      run: cd src && docker compose down
