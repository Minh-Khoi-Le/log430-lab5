name: CI/CD - Build & Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: magasin_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    # ------- Build Backend -------
    - name: Set up Node.js (backend)
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: Install backend dependencies
      run: cd server && npm ci

    - name: Generate Prisma client & migrate
      run: |
        cd server
        npx prisma generate
        npx prisma migrate deploy
      env:
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/magasin_db"

    # ------- Build Frontend -------
    - name: Set up Node.js (frontend)
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install frontend dependencies
      run: cd client && npm ci

    - name: Run frontend linting
      run: cd client && npm run lint

    - name: Build frontend (Vite)
      run: cd client && npm run build

    # ------- Docker build & Test -------
    - name: Build Docker images
      run: docker compose build

    - name: Test Docker images exist
      run: |
        # Verify that Docker images were built successfully
        docker images | grep log430 || docker images | grep server
        echo "Docker build test completed successfully"

  # ------- K6 Performance Tests (optional job) -------
  performance-tests:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Start services with Docker Compose
      run: |
        docker compose up -d
        sleep 30  # Wait for services to be ready

    - name: Install K6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Wait for API to be ready
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:3000/api/v1/health; do sleep 2; done'

    - name: Run K6 performance tests
      run: |
        k6 run server/tests/k6/product-test.js
        k6 run server/tests/k6/load-balance-test.js

    - name: Cleanup
      run: docker compose down
