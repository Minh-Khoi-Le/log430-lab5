# Docker Compose configuration for API Gateway
# This configuration sets up Kong API Gateway with the microservices

version: '3.8'

services:
  # Kong API Gateway
  kong:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kong-gateway
    ports:
      - "8000:8000"    # Gateway proxy port
      - "8001:8001"    # Admin API port
      - "8443:8443"    # HTTPS proxy port
      - "8444:8444"    # HTTPS admin port
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/usr/local/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PROXY_LISTEN=0.0.0.0:8000
      - KONG_LOG_LEVEL=info
      - KONG_PLUGINS=bundled,prometheus
    volumes:
      - ./kong.yml:/usr/local/kong/declarative/kong.yml:ro
    networks:
      - gateway-network
      - microservices-network
    depends_on:
      - product-service
      - user-service
      - store-service
      - stock-service
      - sales-service
      - refund-service
      - cart-service
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Microservices (using existing services)
  # These services are imported from the existing microservices setup
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    environment:
      POSTGRES_DB: log430_db
      POSTGRES_USER: log430_user
      POSTGRES_PASSWORD: log430_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U log430_user -d log430_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Product Service
  product-service:
    build:
      context: ../services/product-service
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://log430_user:log430_password@postgres:5432/log430_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - SERVICE_NAME=product-service
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: ../services/user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=postgresql://log430_user:log430_password@postgres:5432/log430_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - SERVICE_NAME=user-service
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Store Service
  store-service:
    build:
      context: ../services/store-service
      dockerfile: Dockerfile
    container_name: store-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_URL=postgresql://log430_user:log430_password@postgres:5432/log430_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - SERVICE_NAME=store-service
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Stock Service
  stock-service:
    build:
      context: ../services/stock-service
      dockerfile: Dockerfile
    container_name: stock-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DATABASE_URL=postgresql://log430_user:log430_password@postgres:5432/log430_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - SERVICE_NAME=stock-service
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Sales Service
  sales-service:
    build:
      context: ../services/sales-service
      dockerfile: Dockerfile
    container_name: sales-service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - PORT=3005
      - DATABASE_URL=postgresql://log430_user:log430_password@postgres:5432/log430_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - SERVICE_NAME=sales-service
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Refund Service
  refund-service:
    build:
      context: ../services/refund-service
      dockerfile: Dockerfile
    container_name: refund-service
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - PORT=3006
      - DATABASE_URL=postgresql://log430_user:log430_password@postgres:5432/log430_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - SERVICE_NAME=refund-service
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Cart Service
  cart-service:
    build:
      context: ../services/cart-service
      dockerfile: Dockerfile
    container_name: cart-service
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=production
      - PORT=3007
      - DATABASE_URL=postgresql://log430_user:log430_password@postgres:5432/log430_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - SERVICE_NAME=cart-service
    networks:
      - microservices-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Prometheus (for metrics collection)
  prometheus:
    image: prom/prometheus:v2.40.7
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - microservices-network
      - gateway-network
    restart: unless-stopped

  # Grafana (for monitoring dashboards)
  grafana:
    image: grafana/grafana:9.3.2
    container_name: grafana
    ports:
      - "3100:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservices-network
      - gateway-network
    restart: unless-stopped

# Networks
networks:
  microservices-network:
    driver: bridge
    name: microservices-network
  gateway-network:
    driver: bridge
    name: gateway-network

# Volumes
volumes:
  postgres_data:
    name: postgres_data
  redis_data:
    name: redis_data
  prometheus_data:
    name: prometheus_data
  grafana_data:
    name: grafana_data
