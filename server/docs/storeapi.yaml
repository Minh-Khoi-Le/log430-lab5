openapi: 3.0.0
info:
  title: Multi-Stores API
  version: 1.0.0
  description: API for managing multi-store operations, including products, stores, sales, users, and parent company management
servers:
  - url: http://localhost:3000/api/v1
    description: Development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      required: [id, name, price]
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Product Name"
        price:
          type: number
          format: float
          example: 99.99
        description:
          type: string
          example: "Product description"
        stocks:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              quantity:
                type: integer
              storeId:
                type: integer
              productId:
                type: integer
    Store:
      type: object
      required: [id, name]
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Store Name"
        address:
          type: string
          example: "123 Main Street"
    User:
      type: object
      required: [id, name, role]
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "User Name"
        role:
          type: string
          enum: [client, gestionnaire]
          example: "client"
    Sale:
      type: object
      required: [storeId, userId]
      properties:
        id:
          type: integer
          example: 1
        storeId:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        date:
          type: string
          format: date-time
        lines:
          type: array
          items:
            type: object
            properties:
              productId:
                type: integer
              quantity:
                type: integer
              unitPrice:
                type: number
        total:
          type: number
          format: float
        status:
          type: string
          enum: [active, refunded, partially_refunded]
          default: active
    Error:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
paths:
  /products:
    get:
      summary: List products
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /products/{id}:
    get:
      summary: Get a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      summary: Update a product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      summary: Delete a product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No content
  
  # Store routes
  /stores:
    get:
      summary: List all stores
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
    post:
      summary: Create a new store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
      responses:
        '201':
          description: Created
  
  /stores/{id}:
    get:
      summary: Get store details by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
    put:
      summary: Update store information
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
    delete:
      summary: Delete a store
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No content
  
  /stores/{storeId}/stock:
    get:
      summary: Get stock levels for a specific store
      parameters:
        - name: storeId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
  
  # Sales routes
  /sales:
    get:
      summary: List all sales
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'
    post:
      summary: Create a new sale
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientName:
                  type: string
                  description: Client name (used to find user if userId not provided)
                storeId:
                  type: integer
                  description: Store ID where the sale occurred
                userId:
                  type: integer
                  description: User ID (optional if clientName provided)
                cart:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: integer
                      quantity:
                        type: integer
                      price:
                        type: number
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  sale:
                    $ref: '#/components/schemas/Sale'
  
  /sales/history:
    post:
      summary: Get sales history for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'
  
  /sales/user/{userId}:
    get:
      summary: Get sales for a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
  
  /sales/store/{storeId}:
    get:
      summary: Get sales for a specific store
      parameters:
        - name: storeId
          in: path
          required: true
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: OK
  
  /sales/refund:
    post:
      summary: Refund a sale
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                saleId:
                  type: integer
      responses:
        '200':
          description: Refund processed successfully
  
  # User routes
  /users:
    get:
      summary: List all users
      responses:
        '200':
          description: OK
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                role:
                  type: string
                  enum: [client, gestionnaire]
                password:
                  type: string
      responses:
        '201':
          description: Created
  
  /users/login:
    post:
      summary: Authenticate a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /users/{id}:
    get:
      summary: Get user details by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
  
  /users/{id}/sales:
    get:
      summary: Get sales history for a user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
  
  # Maisonmere routes
  /maisonmere/stats:
    get:
      summary: Get performance statistics for all stores
      responses:
        '200':
          description: OK
  
  /maisonmere/consolidated-sales:
    get:
      summary: Get consolidated sales data across all stores
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: OK
  
  # Health check endpoint
  /health:
    get:
      summary: API health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
  
  # Stock routes
  /stock/product/{productId}:
    get:
      summary: Get stock levels for a specific product across all stores
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
    put:
      summary: Update stock quantity for a product in a store
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                storeId:
                  type: integer
                quantity:
                  type: integer
      responses:
        '200':
          description: Stock updated successfully
  
  # Refund routes
  /refunds:
    post:
      summary: Create a new refund
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                saleId:
                  type: integer
                userId:
                  type: integer
                reason:
                  type: string
      responses:
        '201':
          description: Refund created successfully
  
  /refunds/history:
    post:
      summary: Get refund history for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
      responses:
        '200':
          description: OK 