version: '3.8'

services:
  # Shared Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: log430_store
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Shared Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong API Gateway
  kong:
    image: kong:latest
    ports:
      - "8000:8000"  # Public API
      - "8443:8443"  # Public API (SSL)
      - "8001:8001"  # Admin API
      - "8444:8444"  # Admin API (SSL)
    volumes:
      - ./api-gateway/kong/kong.yml:/etc/kong/kong.yml
      - ./api-gateway/kong/plugins:/usr/local/share/lua/5.1/kong/plugins
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: "/etc/kong/kong.yml"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PROXY_ACCESS_LOG: "/dev/stdout"
      KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
      KONG_PROXY_ERROR_LOG: "/dev/stderr"
      KONG_ADMIN_ERROR_LOG: "/dev/stderr"
      KONG_LOG_LEVEL: "info"
    depends_on:
      - user-service
      - catalog-service
      - transaction-service

  user-service:
    build:
      context: .
      dockerfile: ./services/user-service/Dockerfile
    ports:
      - "5001:5001"
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/log430_store
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-secret-key-change-in-production
      SERVICE_NAME: user-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  catalog-service:
    build:
      context: .
      dockerfile: ./services/catalog-service/Dockerfile
    ports:
      - "3002:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/log430_store
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SERVICE_NAME: catalog-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  transaction-service:
    build:
      context: .
      dockerfile: ./services/transaction-service/Dockerfile
    ports:
      - "3003:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/log430_store
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SERVICE_NAME: transaction-service
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database migration service
  db-migrate:
    build:
      context: .
      dockerfile: ./services/db-migrate/Dockerfile
    command: sh -c "ls -la && ls -la prisma/ && npx prisma migrate deploy"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/log430_store
    volumes:
      - ./prisma:/app/prisma
    depends_on:
      postgres:
        condition: service_healthy

  # Database seeding service
  db-seed:
    build:
      context: .
    command: node prisma/seed.js
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/log430_store
      NODE_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - seed

  # Web client
  web-client:
    build:
      context: ./web-client
    ports:
      - "5173:80"
    depends_on:
      - kong
    profiles:
      - frontend

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge