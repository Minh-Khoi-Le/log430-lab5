@startuml Diagramme de classes

title Diagramme de classes — LOG430 Magasin

' === Backend Domain Models ===
package "Domain Models" {
  class Store {
    +id: Int
    +name: String
    +address: String
    --
    +getStats(): StoreStats
  }

  class Product {
    +id: Int
    +name: String
    +price: Float
    +description: String
    --
    +updatePrice(newPrice: Float)
    +updateDescription(desc: String)
  }

  class Stock {
    +id: Int
    +quantity: Int
    +storeId: Int
    +productId: Int
    --
    +checkAvailability(qty: Int): Boolean
    +adjustQuantity(qty: Int)
  }

  class User {
    +id: Int
    +name: String
    +role: String
    +password: String
    --
    +authenticate(): Boolean
  }

  class Sale {
    +id: Int
    +date: DateTime
    +total: Float
    +status: String
    +storeId: Int
    +userId: Int
    --
    +calculateTotal(): Float
    +markAsRefunded()
  }

  class SaleLine {
    +id: Int
    +quantity: Int
    +unitPrice: Float
    +saleId: Int
    +productId: Int
    --
    +calculateSubtotal(): Float
  }

  class Refund {
    +id: Int
    +date: DateTime
    +total: Float
    +reason: String
    +saleId: Int
    +storeId: Int
    +userId: Int
    --
    +calculateRefundTotal(): Float
  }

  class RefundLine {
    +id: Int
    +quantity: Int
    +unitPrice: Float
    +refundId: Int
    +productId: Int
    --
    +calculateRefundAmount(): Float
  }
}

' === Backend Services Layer ===
package "Services" {
  class ProductService {
    +list(options: Object): Product[]
    +get(id: Int): Product
    +create(data: Object): Product
    +update(id: Int, data: Object): Product
    +delete(id: Int): Boolean
  }

  class RedisService {
    +getCache(key: String): Object
    +setCache(key: String, value: Object, ttl: Int)
    +invalidateCache(pattern: String)
  }
}

' === Backend Controllers ===
package "Controllers" {
  class ProductController {
    +list(req, res, next)
    +get(req, res, next)
    +create(req, res, next)
    +update(req, res, next)
    +delete(req, res, next)
  }

  class MaisonMereController {
    +stats(req, res, next)
    +salesReport(req, res, next)
  }

  class SaleController {
    +create(req, res, next)
    +list(req, res, next)
    +get(req, res, next)
  }

  class StoreController {
    +list(req, res, next)
    +get(req, res, next)
    +getStock(req, res, next)
  }

  class RefundController {
    +create(req, res, next)
    +list(req, res, next)
    +get(req, res, next)
  }
}

' === Frontend Components ===
package "Frontend" {
  class CartContext {
    +cart: Product[]
    +addToCart(product: Product)
    +removeFromCart(id: Int)
    +clearCart()
    +getTotalPrice(): Float
  }

  class UserContext {
    +user: User
    +login(credentials: Object): Boolean
    +logout()
    +isAuthenticated(): Boolean
  }

  class ProductList {
    +products: Product[]
    +displayProducts()
    +filterProducts(criteria: String)
  }

  class Dashboard {
    +stats: Object
    +displayStatistics()
    +generateReports()
  }
}

' === Middleware ===
package "Middleware" {
  class CacheMiddleware {
    +cacheMiddleware(ttl: Int): Function
  }

  class AuthMiddleware {
    +auth(req, res, next)
    +requireRole(role: String): Function
  }

  class MetricsMiddleware {
    +recordMetrics(operation: String)
  }
}

'--- Relations principales ---
Store "1" o-- "*" Stock : possède
Stock "*" o-- "1" Product : concerne
Store "1" o-- "*" Sale : effectue
Store "1" o-- "*" Refund : traite
User "1" o-- "*" Sale : effectue
User "1" o-- "*" Refund : demande
Sale "1" o-- "*" SaleLine : compose
Sale "1" o-- "*" Refund : peut_generer
SaleLine "*" o-- "1" Product : concerne
Refund "1" o-- "*" RefundLine : compose
RefundLine "*" o-- "1" Product : concerne

ProductController --> ProductService : utilise
ProductService --> Product : manipule
ProductController --> CacheMiddleware : utilise
AuthMiddleware --> User : authentifie
RedisService --> CacheMiddleware : utilise

@enduml
